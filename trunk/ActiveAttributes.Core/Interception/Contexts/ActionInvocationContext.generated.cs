//------------------------------------------------------------------------------
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated.
//
//------------------------------------------------------------------------------
// Copyright (c) rubicon IT GmbH, www.rubicon.eu
//
// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.  rubicon licenses this file to you under 
// the Apache License, Version 2.0 (the "License"); you may not use this 
// file except in compliance with the License.  You may obtain a copy of the 
// License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
// License for the specific language governing permissions and limitations
// under the License.

using System;
using System.Reflection;

namespace ActiveAttributes.Core.Interception.Contexts
{
  public class ActionInvocationContext<TInstance> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance)
        : base(methodInfo, instance)
    {
    }


    public override int Count
    {
      get { return 0; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }

    public override int Count
    {
      get { return 2; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }

    public override int Count
    {
      get { return 3; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3, TA4> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }
    public TA4 Arg4 { get; protected set; }

    public override int Count
    {
      get { return 4; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          case 4: Arg4 = (TA4) value; arg = "Arg4"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }
    public TA4 Arg4 { get; protected set; }
    public TA5 Arg5 { get; protected set; }

    public override int Count
    {
      get { return 5; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          case 4: Arg4 = (TA4) value; arg = "Arg4"; break;
          case 5: Arg5 = (TA5) value; arg = "Arg5"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }
    public TA4 Arg4 { get; protected set; }
    public TA5 Arg5 { get; protected set; }
    public TA6 Arg6 { get; protected set; }

    public override int Count
    {
      get { return 6; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          case 4: Arg4 = (TA4) value; arg = "Arg4"; break;
          case 5: Arg5 = (TA5) value; arg = "Arg5"; break;
          case 6: Arg6 = (TA6) value; arg = "Arg6"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6, TA7> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6, TA7 arg7)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
      Arg7 = arg7;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }
    public TA4 Arg4 { get; protected set; }
    public TA5 Arg5 { get; protected set; }
    public TA6 Arg6 { get; protected set; }
    public TA7 Arg7 { get; protected set; }

    public override int Count
    {
      get { return 7; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          case 7: return Arg7;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          case 4: Arg4 = (TA4) value; arg = "Arg4"; break;
          case 5: Arg5 = (TA5) value; arg = "Arg5"; break;
          case 6: Arg6 = (TA6) value; arg = "Arg6"; break;
          case 7: Arg7 = (TA7) value; arg = "Arg7"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
  public class ActionInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6, TA7, TA8> : ActionInvocationContextBase<TInstance>
  {

    public ActionInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6, TA7 arg7, TA8 arg8)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
      Arg7 = arg7;
      Arg8 = arg8;
    }

    public TA1 Arg1 { get; protected set; }
    public TA2 Arg2 { get; protected set; }
    public TA3 Arg3 { get; protected set; }
    public TA4 Arg4 { get; protected set; }
    public TA5 Arg5 { get; protected set; }
    public TA6 Arg6 { get; protected set; }
    public TA7 Arg7 { get; protected set; }
    public TA8 Arg8 { get; protected set; }

    public override int Count
    {
      get { return 8; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          case 7: return Arg7;
          case 8: return Arg8;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        string arg;
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; arg = "Arg1"; break;
          case 2: Arg2 = (TA2) value; arg = "Arg2"; break;
          case 3: Arg3 = (TA3) value; arg = "Arg3"; break;
          case 4: Arg4 = (TA4) value; arg = "Arg4"; break;
          case 5: Arg5 = (TA5) value; arg = "Arg5"; break;
          case 6: Arg6 = (TA6) value; arg = "Arg6"; break;
          case 7: Arg7 = (TA7) value; arg = "Arg7"; break;
          case 8: Arg8 = (TA8) value; arg = "Arg8"; break;
          default: throw new IndexOutOfRangeException ("idx");
        }
#if DEBUG
        Log.DebugFormat ("Set '{0}' of method '{1}' to '{2}'.", arg, MethodInfo, value);
#endif
      }
    }
  }
}
