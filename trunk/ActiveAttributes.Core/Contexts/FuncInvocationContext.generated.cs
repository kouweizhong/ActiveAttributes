//------------------------------------------------------------------------------
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated.
//
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using Remotion.Logging;

namespace ActiveAttributes.Core.Contexts
{
  public class FuncInvocationContext<TInstance, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance)
        : base(methodInfo, instance)
    {
    }


    public override int Count
    {
      get { return 0; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }

    public override int Count
    {
      get { return 2; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }

    public override int Count
    {
      get { return 3; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TA4, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }
    public TA4 Arg4 { get; set; }

    public override int Count
    {
      get { return 4; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 4: Arg4 = (TA4) value; s_log.DebugFormat ("Set 'Arg4' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }
    public TA4 Arg4 { get; set; }
    public TA5 Arg5 { get; set; }

    public override int Count
    {
      get { return 5; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 4: Arg4 = (TA4) value; s_log.DebugFormat ("Set 'Arg4' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 5: Arg5 = (TA5) value; s_log.DebugFormat ("Set 'Arg5' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }
    public TA4 Arg4 { get; set; }
    public TA5 Arg5 { get; set; }
    public TA6 Arg6 { get; set; }

    public override int Count
    {
      get { return 6; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 4: Arg4 = (TA4) value; s_log.DebugFormat ("Set 'Arg4' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 5: Arg5 = (TA5) value; s_log.DebugFormat ("Set 'Arg5' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 6: Arg6 = (TA6) value; s_log.DebugFormat ("Set 'Arg6' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6, TA7, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6, TA7 arg7)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
      Arg7 = arg7;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }
    public TA4 Arg4 { get; set; }
    public TA5 Arg5 { get; set; }
    public TA6 Arg6 { get; set; }
    public TA7 Arg7 { get; set; }

    public override int Count
    {
      get { return 7; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          case 7: return Arg7;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 4: Arg4 = (TA4) value; s_log.DebugFormat ("Set 'Arg4' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 5: Arg5 = (TA5) value; s_log.DebugFormat ("Set 'Arg5' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 6: Arg6 = (TA6) value; s_log.DebugFormat ("Set 'Arg6' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 7: Arg7 = (TA7) value; s_log.DebugFormat ("Set 'Arg7' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
  public class FuncInvocationContext<TInstance, TA1, TA2, TA3, TA4, TA5, TA6, TA7, TA8, TR> : FuncInvocationContextBase<TInstance, TR>
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (IInvocationContext));

    public FuncInvocationContext (MethodInfo methodInfo, TInstance instance, TA1 arg1, TA2 arg2, TA3 arg3, TA4 arg4, TA5 arg5, TA6 arg6, TA7 arg7, TA8 arg8)
        : base(methodInfo, instance)
    {
      Arg1 = arg1;
      Arg2 = arg2;
      Arg3 = arg3;
      Arg4 = arg4;
      Arg5 = arg5;
      Arg6 = arg6;
      Arg7 = arg7;
      Arg8 = arg8;
    }

    public TA1 Arg1 { get; set; }
    public TA2 Arg2 { get; set; }
    public TA3 Arg3 { get; set; }
    public TA4 Arg4 { get; set; }
    public TA5 Arg5 { get; set; }
    public TA6 Arg6 { get; set; }
    public TA7 Arg7 { get; set; }
    public TA8 Arg8 { get; set; }

    public override int Count
    {
      get { return 8; }
    }

    public override object this [int idx]
    {
      get
      {
        switch (idx + 1)
        {
          case 1: return Arg1;
          case 2: return Arg2;
          case 3: return Arg3;
          case 4: return Arg4;
          case 5: return Arg5;
          case 6: return Arg6;
          case 7: return Arg7;
          case 8: return Arg8;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
      set
      {
        switch (idx + 1)
        {
          case 1: Arg1 = (TA1) value; s_log.DebugFormat ("Set 'Arg1' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 2: Arg2 = (TA2) value; s_log.DebugFormat ("Set 'Arg2' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 3: Arg3 = (TA3) value; s_log.DebugFormat ("Set 'Arg3' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 4: Arg4 = (TA4) value; s_log.DebugFormat ("Set 'Arg4' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 5: Arg5 = (TA5) value; s_log.DebugFormat ("Set 'Arg5' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 6: Arg6 = (TA6) value; s_log.DebugFormat ("Set 'Arg6' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 7: Arg7 = (TA7) value; s_log.DebugFormat ("Set 'Arg7' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          case 8: Arg8 = (TA8) value; s_log.DebugFormat ("Set 'Arg8' of method '{0}' to '{2}'.", MethodInfo, null, value); break;
          default: throw new IndexOutOfRangeException ("idx");
        }
      }
    }
  }
}
